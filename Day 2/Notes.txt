Data Types
Data types describe the characteristics of data. Data types can be divided into two catagories. 
  1. Primitive data Types
  2. Non-Primitive data types (Object References)

Primitive data types in JavaScript include:
  Numbers - Integers, floats
  Strings - Any data under single quote, double quote or backtick quote
  Booleans - true or false value
  Null - empty value or no value
  Undefined - a declared variable without a value
  Symbol - A unique value that can be generated by Symbol constructor

Non-primitive data types in JavaScript includes:
  Objects
  Arrays

Characteristics of Primitive data types:
  immutable (non-modifiable)
   - It is important not to confuse a primitive itself with a variable assigned a primitive value. 
   - The variable may be reassigned to a new value, but the existing value can not be changed in the ways that objects, arrays, and functions can be altered.

Characteristics of non-primitive data types:
  mutable (modifiable)
  Can be modify the value of non-primitive data types after it is created. 
  Can not be compaired 
   Do not compare arrays, functions, or objects. Non-primitive values are referred to as reference types, because they are being compared by reference instead of value. Two objects are only strictly equal if they refer to the same underlying object.


Math Object 
The Math Object provides many methods to work with numbers. 
Such as:
  Math.round(x)     - rounds values to the nearest number 
  Math.floor(x)     - rounding down
  Math.ceil(x)      - rounding up
  Math.min(x,y,z)   - returns the minimum value
  Math.max(x,y,z)   - returns the maximum value
  Math.random()     - returns a random number between 0 and 0.9999...
  Math.abs(x)       - returns the absolute value of a number
  Math.sqrt(x)      - returns the squar root of number
  Math.pow(x,y)     - returns x to the power of y
  Math.log(x)       - returns the natural logarithm with base E of x
  Math.LN2          - returns the natural logarithm of 2
  Math.LN10         - returns the natural logarithm of 10
  Math.sin(x)       - Trig
  Math.cons(x)      - Trig


Strings are texts which use single, double, or back-tick quotes. 
Syntax - let variableName = "stringValue"

Concatenation is connecting two or more stings together.
let variable = "String text" + " " + anotherVariable
or 
let variable = "String text " + anotherVariable

A string could be a single character or paragraph or a page. If the string length is too big it does not fit in one line. We can use the backslash character (\) at the end of each line to indicate that the string will continue on the next line.

Backslash (\) is also used as an escape sequence. This allows for additional string formatting options. 
  \n        - New line
  \t        - Tab or 8 spaces 
  \\        - Inserts a backslash
  \'        - Will type a single quote
  \"        - Will type a double quote 

Template Literals (Template Strings)
Are used to add data within a a template string. These us backticks `.
Syntax - `String literal text ${expression}`

String interpolation method can add expressions which could be a value or some operations - comparision, arithmetic operations, ternary operation

let a = 2
let b = 3
console.log(`${a} is greater then ${b} : ${a > b}`)


String Methods:

length - used to return the number of characters in a string including empty spaces. 
  EX:
  let js = 'JavaScript'
  console.log(js.length)    //10

Index - indexes are used to access each character within a stirng. The count of an index starts at 0 and the last index is the lenght of the string minus one. 

let string = 'JavaScript'
let firstLetter = string[0]
console.log(firstLetter)     //J

toUpperCase(): this method changes the string to uppercase letters.

toLowerCase(): this method changes the string to lowercase letters.

substr(x,y): It takes two arguments, the starting index and number of characters to slice. 
  EX:
  let string = 'JavaScript'
  console.log(string.substr(4,6)) start at index 4 and the number of characters to slice. 
    let string = 'JavaScript'              
    console.log(string.substr(4,6))   //Script
4 characters over is S because J = 0 a = 1 v = 2 a = 3         - index
and 6 character from S is S = 1 c = 2 r = 3 i = 4 p = 5 t = 6  - length

substring(x,[y]) takes in two arguments the staring index and the stopping index but does not include the character at the stopping index. 
  EX:
  let string = 'JavaScript'
  console.log(string.substring(0,4))  //Java
  console.log(string.substring(4,10))   //Script
  console.log(string.substring(4))   //Script

split(x) this method will split a string at a specified place. First the string is changed to an Array. Then will split the array at the specified argument. 
  EX:
  let string = '30 Days Of JavaScript'
  console.log(string.split())     // Changes to an array ->        ["30 Days Of JavaScript"] - One object in the array.

  console.log(string.split(' '))  // Split to an array at space -> ["30", "Days", "Of", "JavaScript"] - four objects in the array. 

trim() removes trailing spaces before or after a string 
  EX:
  let myName = '   Blake McCann       '
  console.log(myName.trim())      \\ Blake McCann

includes(x) returns a boolean (true/false) if a substring exist within a string. Case sensitive. 
  EX: 
  let string = '30 Days of JavaScript'
  console.log(string.includes('Days'))  //true
  console.log(string.includes('days'))  //false
  console.log(string.includes('Java'))  //true


replace(x,y) takes two arguments the oldsubstring replaces it with the newsubstring.
  EX:
  string.replace(oldsubstring, newsubstring)
  let string = '30 Days Of JavaScript'
  console.log(string.replace('JavaScript', 'Python')) // 30 Days Of Python

charAt(x) takes an index as an argument and returns the value at that index. 
  EX:
  string.charAt(index)
  let string = '30 Days Of JavaScript'
  console.log(string.charAt(0))        // 3

charCodeAt(x) takes an index as an argument and returns the char code (ASCII number) of the value at that index. 
  EX:
  string.charCodeAt(index)
  let string = '30 Days Of JavaScript'
  console.log(string.charCodeAt(3))        // D ASCII number is 68

  let lastIndex = string.length - 1
  console.log(string.charCodeAt(lastIndex)) // t ASCII is 116

indexOf(x) Takes a substring as an argument and if the substring exits in a string it returns the first position of the substring. If it does not exist it returns -1
  EX: 
  string.indexOf(substring)
  let string = '30 Days Of JavaScript'

  console.log(string.indexOf('D'))          // 3
  console.log(string.indexOf('Days'))       // 3
  console.log(string.indexOf('days'))       // -1
  console.log(string.indexOf('a'))          // 4
  console.log(string.indexOf('JavaScript')) // 11

lastIndexOf(x) Takes a  substring as an argument and if the substring exist in a string in returns the last position of the substring. If it does not exist it returns -1
  EX: 
  string.lastIndexOf(substring)
  let string = 'I live in Louisiana. A lot of people live in Louisiana'
  console.log(string.lastIndexOf('Lou')) //-1

concat(x,y...) Takes multiple substrings and concatenates them together.
  EX:
  string.concat(substring, substring, substring)

  let codeString  = '30'
  console.log(string.concat("Days", "Of", "JavaScript"))
  // 30DaysOfJavaScript


startsWith(x) Takes a substring as an argument and checks if the string starts with that specified substring. Returns boolean (true/false).
  EX:
  string.startsWith(substring)
  let string = 'Love is the best to in this world'
  console.log(string.startsWith('Love'))   // true
  console.log(string.startsWith('love'))   // false
  console.log(string.startsWith('world'))  // false

endsWith(x) Takes a substring as an argument and checks if the stirng ends with that specified substring. Returns boolean (true/false).
  EX:
  string.endsWith(substring)
  let string = 'Love is the most powerful feeling in the world'
  console.log(string.endsWith('world'))         // true
  console.log(string.endsWith('love'))          // false
  console.log(string.endsWith('in the world')) // true

search(x) - Takes a substring as an argument and returns the index of the first accurance. The search value can be a string or a regular expression pattern.
  EX:
  string.search(substring)
  let string = 'I love JavaScript. If you do not love JavaScript what else can you love.'
  console.log(string.search('love'))          // 2  - starts at index 2
  console.log(string.search(/javascript/gi))  // 7  - starts at index 7

match() - Takes in a substring as an argument or regular expression pattern and returns an array if there is a match if not it returns null.
  EX:
  string.match(substring)
  let string = 'I love JavaScript. If you do not love JavaScript what else can you love.'
console.log(string.match('love'))
output:
["love", index: 2, input: "I love JavaScript. If you do not love JavaScript what else can you love.", groups: undefined]

repeat(x) - Takes in a number as an argumment and returns the repeated version of the string. 
  EX:
  string.repeat(n)
  let string = 'JavaScript'
  console.log(string.repeat(3))  //JavaScriptJavaScriptJavaScript

The typeof method allows you to check the data type of certain variables. 
let country = 'Finland'         // string
let city = 'Helsinki'           // string
let age = 250                   // number 
let job                         // undefined, because a value was not assigned

console.log(typeof 10)          // number
console.log(typef true)         //boolean
console.log(typeof job)         // undefined


Changing Data Types (Casting)
Casting is converting one data type to another data type. 
When we do arithmetic operations string numbers should be first converted to integer or float if not it returns an error.
  parseInt()
  parseFloat()
  Number()
  + sign 
  str()

converting a string to a number 
let num = '10'
let numInt = parseInt(num) //10
let numInt = Number(num)   //10
let numInt = +num          //10

converting a string to a float 
let num = '9.81'
let numFloat = parseFloat(num)  //9.81
let numFloat = Number(num)      //9.81
let numFloat = +num             //9.81

Float to Integers
let num = 9.81
let numInt = parseInt(num) //9








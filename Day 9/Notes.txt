Higher Order Function

Higher Order Functions take other functions as a parameter or returns a function as a value. 
  - A function passed as a parameter is known as a callback.

Callback 
A callback is a function which can be passed as a parameter to other functions. 

Returning Function
A Hgher order function can return functions as a value. 

Setting Time
JavaScript allows us to execute an activity in a certain intenerval of time or schedule/wait for some time to ececute some activities. 

  setInterval
  setTimeout

Setting Interval using setInterval function 

The setInterval is a higher order function used to do some activity continously with some interval of time. 
The setInterval global method takes a callback function and a duration as a parameter. 
  - The duration is in milliseconds.
  - The callback will always be called in that interval of time. 

Syntax:
  function callback(){
    //code
  }
  setInterval(callback, duration);

Setting a time using a setTimeout function

The setTimeout is a higher order function used to execute some aciton at some point in the future. 
The setTimeout global method takes a callback funciton and a duration as a parameter.
  - The duration is in milliseconds.
  - The callback will wait for the specified amount of time before executing.
  - Only executes once.

Syntax:
function callback(){
  //code
}

setTimeout(callback, duration);


Functional Programming
JavaScript introduced a number of built in methods which can help solve complicated problems. 
  - All buildin method take callback functions.

  forEach 
  map
  filter
  reduce
  find
  every
  some
  sort 

forEach - iterate an array element. forEach is only used with arrays.
  - It takes a callback function with elements, index parameter(optional) and array itself. 
  The forEach() method is an iterative method. It calls a provided callbackFn function once for each element in an array in ascending-index order

Syntax:
  arr.forEach(function (element, index, arr){
    console.log(index, element, arr);
  })
or
  arr.forEach(element, index, arr) => {
    console.log(index, element, arr);
  }
or
  arr.forEach(element,index, arr) => console.log(index, element, arr)

map - Iterates an arrays elements and modifys the arrays elements. It takes a callback function with elements, index, array parameter and returns a new array. 

  const modifiedArray = arr.map(function(element, index, arr){
  return element;
  })

filter - Filter out items which meet a condition and return a new array.

  const result = arr.filter(function(currentValue, index, arr), thisValue)


reduce - reduce takes a callback function. The callback function takes an accumulator, current, and optional initial value as a parameter and returns a single value. 
  - It is good practice to define an initial value for the accumulator value. 
  - If one is not specified by default the accumulator will get array first value. (If the array is empty it will throw an error)

  arr.reduce((arr, cur) =>{
    //some operations
    return
  }, initialValue)

every - checkes if all the elements are similar in one aspect.
  - Returns a boolean
  
  array.every(function(currentValue, index, arr), thisValue)

find - returns the first element that meets the condition

  array.find(function(currentValue, index, arr),thisValue)

findIndex - return the position/index of the first element which satisfies the condition 

  array.findIndex(function(currentValue, index, arr), thisValue)

some - checks if some of the elements are similar in one aspect
  - Returns a boolean

sort - The sort methods arranges the array elements either ascending or descending order. By default, the sort() method sorts values as strings.This works well for string array items but not for numbers. If number values are sorted as strings and it give us wrong result. Sort method modify the original array. 
  - It is recommended to copy the original data before you start using sort method.

  array.sort(compareFunction)

Sort converts items to string , since '100' and other numbers compared, 1 which the beginning of the string '100' became the smallest. To avoid this, we use a compare call back function inside the sort method, which return a negative, zero or positive. 

Sorting Object Arrays
Whenever sorting objects in an array, we use the object key to compare.

  objArr.sort(function (a, b) {
    if (a.key < b.key) return -1
    if (a.key > b.key) return 1
    return 0
  })

  // or

  objArr.sort(function (a, b) {
    if (a['key'] < b['key']) return -1
    if (a['key'] > b['key']) return 1
    return 0
  })